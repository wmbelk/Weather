#%%
import pymc as py
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
import pandas as pd
import scipy.stats as stats
import seaborn as sns

#%%

therm = stats.multivariate_normal.rvs(mean=[0,0], cov=[[1,0],[0,1]], size=1000)
therm = pd.DataFrame(therm, columns=['x','y'])
therm.plot(kind='scatter', x='x', y='y')
plt.show()
#%%
def sample_signal(n_samples, corr, mu=0, sigma=1):
    assert 0 < corr < 1, "Auto-correlation must be between 0 and 1"

    # Find out the offset `c` and the std of the white noise `sigma_e`
    # that produce a signal with the desired mean and variance.
    # See https://en.wikipedia.org/wiki/Autoregressive_model
    # under section "Example: An AR(1) process".
    c = mu * (1 - corr)
    sigma_e = np.sqrt((sigma ** 2) * (1 - corr ** 2))

    # Sample the auto-regressive process.
    signal = [c + np.random.normal(0, sigma_e)]
    for _ in range(1, n_samples):
        signal.append(c + corr * signal[-1] + np.random.normal(0, sigma_e))

    return np.array(signal)

def compute_corr_lag_1(signal):
    return np.corrcoef(signal[:-1], signal[1:])[0][1]

# Examples.
print(compute_corr_lag_1(sample_signal(5000, 0.5)))
print(np.mean(sample_signal(5000, 0.5, mu=2)))
print(np.std(sample_signal(5000, 0.5, sigma=3)))
#%%
samp_lat= pd.DataFrame(sample_signal(250, 0.5, mu=2))


# %%
samp = sample_signal(250, 0.5, mu=samp_lat)
samp = pd.DataFrame(samp[:, :, 0])

# %%
samp.values
# %%
x2, y2 = np.meshgrid(samp.index.values, samp.columns.values)
plt.figure(figsize=(6,5))
axes = plt.axes(projection='3d')
axes.plot_surface(x2, y2,samp.values,cmap=cm.coolwarm,
                          linewidth=0, antialiased=False)
axes.set_xlabel('Longitude')
axes.set_ylabel('Latitude')
axes.set_zlabel('Temperature')
# keeps padding between figure elements
plt.tight_layout()
plt.show()
# %%
